"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.POST = exports.GET = void 0;
var server_1 = require("next/server");
var promises_1 = require("fs/promises");
var path_1 = require("path");
var prisma_1 = require("@/lib/prisma");
// GET /api/coins?network=TESTNET|MAINNET
function GET(req) {
    return __awaiter(this, void 0, void 0, function () {
        var network, coins;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    network = req.nextUrl.searchParams.get('network');
                    if (network !== 'TESTNET' && network !== 'MAINNET') {
                        return [2 /*return*/, server_1.NextResponse.json({ error: 'Invalid network' }, { status: 400 })];
                    }
                    return [4 /*yield*/, prisma_1.prisma.coin.findMany({
                            where: { network: network },
                            orderBy: { createdAt: 'desc' },
                        })];
                case 1:
                    coins = _a.sent();
                    return [2 /*return*/, server_1.NextResponse.json(coins)];
            }
        });
    });
}
exports.GET = GET;
// POST /api/coins
function POST(req) {
    var _a, _b, _c;
    return __awaiter(this, void 0, void 0, function () {
        var formData, name, label, rawNetwork, file, bytes, buffer, filename, filePath, iconUrl, coin, err_1;
        return __generator(this, function (_d) {
            switch (_d.label) {
                case 0:
                    _d.trys.push([0, 5, , 6]);
                    return [4 /*yield*/, req.formData()];
                case 1:
                    formData = _d.sent();
                    name = (_a = formData.get('name')) === null || _a === void 0 ? void 0 : _a.toString();
                    label = (_b = formData.get('label')) === null || _b === void 0 ? void 0 : _b.toString();
                    rawNetwork = (_c = formData.get('network')) === null || _c === void 0 ? void 0 : _c.toString();
                    file = formData.get('icon');
                    if (!name || !label || !file || (rawNetwork !== 'MAINNET' && rawNetwork !== 'TESTNET')) {
                        return [2 /*return*/, server_1.NextResponse.json({ error: 'Missing or invalid fields' }, { status: 400 })];
                    }
                    return [4 /*yield*/, file.arrayBuffer()];
                case 2:
                    bytes = _d.sent();
                    buffer = Buffer.from(bytes);
                    filename = "".concat(Date.now(), "-").concat(file.name);
                    filePath = path_1.default.join(process.cwd(), 'public/uploads', filename);
                    return [4 /*yield*/, (0, promises_1.writeFile)(filePath, buffer)];
                case 3:
                    _d.sent();
                    iconUrl = "/uploads/".concat(filename);
                    return [4 /*yield*/, prisma_1.prisma.coin.create({
                            data: {
                                name: name,
                                symbol: label,
                                iconUrl: iconUrl,
                                network: rawNetwork, // enum: 'TESTNET' atau 'MAINNET'  
                            },
                        })];
                case 4:
                    coin = _d.sent();
                    return [2 /*return*/, server_1.NextResponse.json(coin)];
                case 5:
                    err_1 = _d.sent();
                    console.error('GAGAL SIMPAN COIN:', err_1);
                    return [2 /*return*/, server_1.NextResponse.json({ error: 'Internal Server Error', detail: err_1.message }, { status: 500 })];
                case 6: return [2 /*return*/];
            }
        });
    });
}
exports.POST = POST;
