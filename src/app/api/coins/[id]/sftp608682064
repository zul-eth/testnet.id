"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DELETE = exports.PUT = void 0;
var promises_1 = require("fs/promises");
var path_1 = require("path");
var server_1 = require("next/server");
var prisma_1 = require("@/lib/prisma");
function PUT(req, _a) {
    var _b, _c, _d;
    var params = _a.params;
    return __awaiter(this, void 0, void 0, function () {
        var coinId, formData, name, label, rawNetwork, iconFile, iconUrl, bytes, buffer, fileName, filePath, updatedCoin, err_1;
        return __generator(this, function (_e) {
            switch (_e.label) {
                case 0:
                    _e.trys.push([0, 6, , 7]);
                    coinId = params.id;
                    return [4 /*yield*/, req.formData()];
                case 1:
                    formData = _e.sent();
                    name = (_b = formData.get('name')) === null || _b === void 0 ? void 0 : _b.toString();
                    label = (_c = formData.get('label')) === null || _c === void 0 ? void 0 : _c.toString();
                    rawNetwork = (_d = formData.get('network')) === null || _d === void 0 ? void 0 : _d.toString();
                    iconFile = formData.get('icon');
                    if (!coinId || !name || !label || (rawNetwork !== 'MAINNET' && rawNetwork !== 'TESTNET')) {
                        return [2 /*return*/, server_1.NextResponse.json({ error: 'Missing or invalid fields' }, { status: 400 })];
                    }
                    iconUrl = void 0;
                    if (!(iconFile && iconFile.size > 0)) return [3 /*break*/, 4];
                    return [4 /*yield*/, iconFile.arrayBuffer()];
                case 2:
                    bytes = _e.sent();
                    buffer = Buffer.from(bytes);
                    fileName = "".concat(Date.now(), "-").concat(iconFile.name);
                    filePath = path_1.default.join(process.cwd(), 'public/uploads', fileName);
                    return [4 /*yield*/, (0, promises_1.writeFile)(filePath, buffer)];
                case 3:
                    _e.sent();
                    iconUrl = "/uploads/".concat(fileName);
                    _e.label = 4;
                case 4: return [4 /*yield*/, prisma_1.prisma.coin.update({
                        where: { id: coinId },
                        data: __assign({ name: name, symbol: label, network: rawNetwork }, (iconUrl && { iconUrl: iconUrl })),
                    })];
                case 5:
                    updatedCoin = _e.sent();
                    return [2 /*return*/, server_1.NextResponse.json(updatedCoin)];
                case 6:
                    err_1 = _e.sent();
                    console.error('GAGAL UPDATE COIN:', err_1);
                    return [2 /*return*/, server_1.NextResponse.json({ error: 'Internal Server Error', detail: err_1.message }, { status: 500 })];
                case 7: return [2 /*return*/];
            }
        });
    });
}
exports.PUT = PUT;
function DELETE(req, _a) {
    var params = _a.params;
    return __awaiter(this, void 0, void 0, function () {
        var coinId, err_2;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    coinId = params.id;
                    _b.label = 1;
                case 1:
                    _b.trys.push([1, 3, , 4]);
                    return [4 /*yield*/, prisma_1.prisma.coin.delete({
                            where: { id: coinId },
                        })];
                case 2:
                    _b.sent();
                    return [2 /*return*/, server_1.NextResponse.json({ success: true })];
                case 3:
                    err_2 = _b.sent();
                    return [2 /*return*/, server_1.NextResponse.json({ error: 'Failed to delete' }, { status: 500 })];
                case 4: return [2 /*return*/];
            }
        });
    });
}
exports.DELETE = DELETE;
